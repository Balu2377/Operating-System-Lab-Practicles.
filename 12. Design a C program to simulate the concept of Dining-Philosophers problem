#include <pthread.h>
#include <stdio.h>
#define N 5 
pthread_mutex_t chopsticks[N]; 
void *philosopher(void *num) {
  int i = *((int *)num);
  while (1) {
    printf("Philosopher %d is thinking\n", i);
    sleep(1);
    printf("Philosopher %d is hungry\n", i);
    pthread_mutex_lock(&chopsticks[i]);
    pthread_mutex_lock(&chopsticks[(i+1) % N]);
    printf("Philosopher %d is eating\n", i);
    sleep(1);
    pthread_mutex_unlock(&chopsticks[i]);
    pthread_mutex_unlock(&chopsticks[(i+1) % N]);
  }
}
int main() {
  pthread_t philosophers[N];
  int i;
  int num[N];
  for (i=0; i<N; i++) {
    pthread_mutex_init(&chopsticks[i], NULL);
    num[i] = i;
    pthread_create(&philosophers[i], NULL, philosopher, &num[i]);
  }
  for (i=0; i<N; i++) {
    pthread_join(philosophers[i], NULL);
  }
  return 0;
}
